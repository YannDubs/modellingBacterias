import os

AddOption('--cfg',
           dest='cfg',
           type='string',
           nargs=1,
           action='store',
           metavar='DIR',
           help='custom cfg filename')

env = Environment(CFG = GetOption('cfg'))

if env['PLATFORM'] == 'darwin':
    env['CXX'] = 'clang++'
    env['CCFLAGS'] = '-stdlib=libc++ '
    env['LINKFLAGS'] = '-stdlib=libc++ '
elif env['PLATFORM'] == 'posix':
    env['CXX'] = 'g++'

includeFlags = '-I{sfmlcosun}/include/ -I{sfguicosun}/include/ -I{catch} -I/usr/local/include/ -Isrc/'.format(
  sfmlcosun = "/usr/local/softs/SFML/",
  sfguicosun = "/usr/local/softs/SFGUI/",
  catch = "extlib/Catch/include/"
)

env.Append(CCFLAGS = '-std=c++11 -Wall -Wextra -g ' + includeFlags)
env.Append(LIBS = ['sfml-system', 'sfml-window', 'sfml-graphics', 'sfgui'])
env.Append(LINKFLAGS = '-L/usr/local/softs/SFGUI/lib -L/usr/local/softs/SFML/lib')
env.Decider('content')

src_dir = ['.'] # use the copy made by VariantDir

# Source files:
app_src         = Glob('Application.cpp')
cfg_src         = Glob('JSON/*.cpp')
env_src         = Glob('Lab/*.cpp')
rand_src        = Glob('Random/*.cpp')
stats_src       = Glob('Stats/*.cpp')
utility_src     = Glob('Utility/*.cpp')

src_files = app_src + cfg_src + env_src + rand_src + stats_src + utility_src
objects=env.Object(source=src_files)

# Use CPPPATH to automatically detect changes in header files and rebuild cpp files that need those headers.
# This also automatically add -Isrc/ option.
all_src_files = src_files
def DefineProgram(name, additional_src):
    for file in additional_src:
        all_src_files.append(file)

    target = env.Program(name, source = objects + additional_src, CPPPATH = src_dir)
    env.Alias(name, target)
    run = env.Command(name+".out",[],"./build/"+name+" $CFG", ENV = os.environ)
    env.Alias(name+"-run", run)
    env.Depends(run, target)
    env.AlwaysBuild(run)
    env.Default(target) # prevent auto execution of 'run' targets
                        # when running `scons -Q`, for example
    ddd = env.Command(name+".ddd.out",[],"ddd --args ./build/"+name+" $CFG", ENV = os.environ)
    env.Depends(ddd, target)
    env.Alias(name+"-ddd", ddd)


DefineProgram('UnitTests', Glob('Tests/UnitTests/*.cpp'))
DefineProgram('NutrimentTest', Glob('Tests/GraphicalTests/NutrimentTest.cpp'))
DefineProgram('SimpleBacteriaTest', Glob('Tests/GraphicalTests/SimpleBacteriaTest.cpp'))
DefineProgram('GripTest', Glob('Tests/GraphicalTests/GripTest.cpp'))
DefineProgram('TwitchingBacteriaTest', Glob('Tests/GraphicalTests/TwitchingBacteriaTest.cpp'))
DefineProgram('SwarmBacteriaTest', Glob('Tests/GraphicalTests/SwarmBacteriaTest.cpp'))

DefineProgram('application', Glob('FinalApplication.cpp'))

if env['CXX'] == 'clang++':
    analyze_cmd = "clang++ -std=c++11 -stdlib=libc++ -Wall -Wextra -Werror " + includeFlags + " --analyze -Xanalyzer -analyzer-output='html' "
    file_list = ' '.join('"' + str(f) + '"' for f in all_src_files)
    analyze = env.Command("analyze.out", all_src_files, analyze_cmd + file_list, ENV = os.environ)
    env.Alias("analyze", analyze)

